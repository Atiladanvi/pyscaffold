.. _reasons:

===============
Why PyScaffold?
===============

Stable and battle-proven
    PyScaffold was created in 2014 to make the developers' life easier.
    Since then it have been used to create awesome Python packages for data
    science, industrial automation, academic research, telecom, web development
    and many other sectors.

Constantly evolving
    Stability should not come with the price of stagnation.
    Throughout its existence, PyScaffold have adapted itself to better solve
    the needs of its users and evolved to accommodate the best practices and
    standards of the Python ecosystem.
    In every single major release we offered a clear update path for our users
    and tried to automate things as much as possible, so everyone can benefit
    from PyScaffold's improvements without being afraid of breaking things.

Thoroughly tested
    PyScaffold have an extensive automated test suite that runs for all major
    operating systems and versions of Python in every commit or pull request.
    Moreover, PyScaffold is used by its maintainers in their day-to-day
    programming and for all PyScaffold's extensions, being constantly
    scrutinized by human beings.

Do one thing and do it well
    It might sound old-fashioned, but we like this piece of good old UNIX wisdom.
    PyScaffold generates files… More specifically, PyScaffold generates a very
    nice project structure for Python projects that want to be re-usable and
    distributed.
    It does not attempt to do dependency management, it does not even attempt to
    build a distribution from your files, all of that is left for other tools
    that have survived the test of time and are staples of the Python culture.
    Instead of reinventing the wheel, we spent all these years curating a list
    of incredibly smart templates that are suitable for the vast majority of
    Python developers.

Standing on the shoulder of giants
    PyScaffold incentives its users to use the best tools and practices
    available in the Python ecosystem.
    Out of the box, a generated project will contain solid configurations for
    setuptools_ (the de facto standard for Python packages), Sphinx_ (the de
    facto Python documentation tool), pytest_ (the de facto Python test runner)
    and tox_ (the de facto tool for managing Python developments), so the users
    can run common tasks as easily as typing ``tox -e build``, ``tox -e docs``,
    or ``tox -e publish`` on the command line.
    For those who want to go the extra mile, PyScaffold can also bring in to
    the mix `pre-commit`_ to run a set of prolific linters and automatic
    formatters in each commit and prevent inconsistent coding.

Composable
    PyScaffold shows its strengths when combined with other tools, and indeed
    we bring configurations for lots of them out of the box.
    In the end of the day, a project generated by PyScaffold is just a plain,
    standard Python package, and will interoperate well with the majority of
    the tools you might want to use in your development environment.

Extensible
    *Don't like something about PyScaffold?*
    *Wish the templates were a little different?*
    *Different workflow? Different tools?*
    *Have you got a nice set of templates that you would like to re-use?*
    Well, go ahead and make PyScaffold yours…
    We have developed a :ref:`powerful extension system <extensions>` that
    allows users to make the most out of PyScaffold. In fact, PyScaffold's core
    is very minimal and lots of its options are implemented themselves as
    extensions and shipped by default.

Easy and yet powerful
    Pyscaffold provides you one simple command with intuitive options.
    New comers can achieve a lot by just running ``putup your_project_name``,
    while power users can dig into our docs/help and discover all our
    :ref:`features`.

No *lock-in*
    Once you generate your project with PyScaffold you can decide you don't
    need it anymore. In fact, that is very easy since PyScaffold does not
    enforce itself as a dependency or even as a dependency manager. You can
    keep living your life and use your regular workflow.
    If you want to erase all the traces of have ever used PyScaffold, please go
    ahead, we even :ref:`have documented that for you… <remove-pyscaffold>`

Batteries included
    PyScaffold comes with a lot of elaborated features and configuration defaults
    to make the most common tasks in developing, maintaining and distributing your
    own Python package as easy as possible. Have a look on :ref:`our list <features>`.

    It is like convincing someone that have spent a lot of time researching how
    to create the best Python packages to handcraft the perfect configuration
    files and project structure for you.


|

Curious? Checkout out `this demo project`_, which was set up using Pyscaffold,
or :ref:`install <installation>` it and type ``putup -h`` to :ref:`get started`.

.. _setuptools: http://setuptools.readthedocs.io/en/latest/setuptools.html
.. _tox: https://tox.readthedocs.org/
.. _Sphinx: http://www.sphinx-doc.org/
.. _pytest: http://pytest.org/
.. _pre-commit: http://pre-commit.com/
